// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserType {
  guest
  cozy
}

enum AccountStatus {
  active
  banned
}

enum Server {
  survival
  creative
}

enum UserOnboardStatus {
  join_discord
  link_discord
  complete_guest
  complete_cozy
}

model User {
  id String @id @default(cuid())
  displayName String @map("display_name")
  avatar String
  email String? @unique
  discordDiscriminator String @unique @map("discord_discriminator")
  type  UserType @default(guest)
  status AccountStatus @default(active)
  minecraftAccounts MinecraftAccount[]
  referrals UserReferral[]
  onboardStatus UserOnboardStatus?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([status])
}

enum MinecraftAccountType {
  java
  bedrock
}

model MinecraftAccount {
  id String @id @default(cuid())
  mojangUUID String @unique @map("mojang_uuid")
  username String @unique

  accountType MinecraftAccountType @default(java) @map("account_type")
  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  referralCode String? @unique @map("referral_code")
  referral UserReferral? @relation(fields: [referralCode], references: [code], onDelete: SetNull, onUpdate: Cascade)

  homes MinecraftAccountHome[]

  status AccountStatus @default(active)

  @@index([userId])
  @@index([status])
}

enum ReferralStatus {
  pending
  accepted
  expired
}

model UserReferral {
  id String @id @default(cuid())
  code String @unique
  username String
  accountType MinecraftAccountType @default(java) @map("account_type")
  mojangUUID String @map("mojang_uuid")
  referredById String @map("referred_by_user_id")
  referredBy User @relation(fields: [referredById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  status ReferralStatus @default(pending)
  minecraftAccount MinecraftAccount?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime? @map("expires_at")

  @@index([referredById])
}

model MinecraftAccountHome {
  id String @id @default(cuid())
  name String
  x Float
  z Float
  y Float
  minecraftAccountMojangUUID String @map("minecraft_account_mojang_uuid")
  minecraftAccount MinecraftAccount @relation(fields: [minecraftAccountMojangUUID], references: [mojangUUID], onDelete: Cascade, onUpdate: Cascade)
  server Server @default(survival)
  worldName String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([minecraftAccountMojangUUID])
}

// model ServerStatus  {
//   id String @id @default(cuid())

//   currentPlayerCount Int @default(0) @map("player_count")
//   highestPlayerCount Int @default(0) @map("highest_player_count")

//   createdAt DateTime @default(now()) @map("created_at")
// }