generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserType {
  guest
  cozy
}

enum AccountStatus {
  active
  banned
}

enum Role {
  player
  moderator
  admin
  operator
}

enum Server {
  survival
  creative
}

enum UserOnboardStatus {
  welcome
  join_discord
  link_discord
  complete_guest
  complete_cozy
}

model User {
  id String @id @default(cuid())
  displayName String @map("display_name")
  avatar String
  email String? @unique
  discordDiscriminator String @unique @map("discord_discriminator")
  type  UserType @default(guest)
  role Role @default(player)
  status AccountStatus @default(active)
  onboardStatus UserOnboardStatus @default(welcome) @map("onboard_status")

  discordAccessToken String @map("discord_access_token")
  discordRefreshToken String @map("discord_refresh_token")

  referralCode String @unique @map("referral_code")

  referredByCode String? @map("referred_by_user_id")
  referredBy User? @relation("user_referred_users", fields: [referredByCode], references: [referralCode], onDelete: NoAction, onUpdate: NoAction)

  minecraftAccounts MinecraftAccount[]
  referrals User[] @relation("user_referred_users")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([referredByCode])
  @@index([status])
}

enum MinecraftAccountType {
  java
  bedrock
}

model MinecraftAccount {
  id String @id @default(cuid())
  mojangUUID String @unique @map("mojang_uuid")
  username String @unique
  accountType MinecraftAccountType @default(java) @map("account_type")
  status AccountStatus @default(active)
  role Role @default(player)

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  homes MinecraftAccountHome[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([status])
}

model MinecraftAccountHome {
  id String @id @default(cuid())
  name String
  x Float
  z Float
  y Float
  minecraftAccountMojangUUID String @map("minecraft_account_mojang_uuid")
  minecraftAccount MinecraftAccount @relation(fields: [minecraftAccountMojangUUID], references: [mojangUUID], onDelete: Cascade, onUpdate: Cascade)
  server Server @default(survival)
  worldName String @map("world_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([minecraftAccountMojangUUID])
}